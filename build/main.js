(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Common = require('../Common');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var __EXTERNAL_ACCESS_HANDLE = '___' + (0, _Common.uid)(32) + 'StudioApp';

var App = function () {
    function App() {
        // noop

        _classCallCheck(this, App);
    }

    _createClass(App, [{
        key: 'isInitialized',
        value: function isInitialized() {
            return this._isInitialized === true;
        }
    }, {
        key: 'init',
        value: function init() {
            window[__EXTERNAL_ACCESS_HANDLE] = function () {
                console.log('new app inited');

                /*
                if (typeof window.jQuery === 'function') {
                    console.log('jQuery present', jQuery().jquery);
                } else {
                    console.log('jQuery is not present');
                }
                */

                var timeout = Date.now();

                var intervalId = setInterval(function () {
                    console.log('check');

                    if (typeof window.jQuery === 'function') {
                        console.log('jQuery is present', jQuery().jquery);
                        clearInterval(intervalId);
                    }

                    if (Date.now() - timeout > 15000) {
                        console.log('check timed out');
                        clearInterval(intervalId);
                    }
                }, 15);
            };

            this._addScriptTag();
        }
    }, {
        key: 'load',
        value: function load() {
            // console.log('load app');
        }
    }, {
        key: '_addScriptTag',
        value: function _addScriptTag() {
            var script = document.createElement('script');

            script.setAttribute('type', 'text/javascript');
            script.appendChild(document.createTextNode('window.' + __EXTERNAL_ACCESS_HANDLE + '();'));

            document.body.appendChild(script);
        }
    }]);

    return App;
}();

exports.default = new App();

},{"../Common":2}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.uid = undefined;

var _uid = require('./uid');

var _uid2 = _interopRequireDefault(_uid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    uid: _uid2.default
};
exports.uid = _uid2.default;

},{"./uid":3}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function () {
    var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;

    if (length <= 0) {
        return '';
    }

    var string = '';

    while (1) {
        string += getRandomString();

        if (string.length >= length) {
            break;
        }
    }

    return string.substr(0, length);
};

/**
 * @returns {string}
 */
function getRandomString() {
    var string = Math.random().toString(36).substr(2);

    var result = '';

    for (var i = 0, len = string.length; i < len; i++) {
        var char = string.charAt(i);

        if (Math.random() > .5) {
            result += char.toUpperCase();
        } else {
            result += char;
        }
    }

    return result;
}

/**
 * @param length
 *
 * @returns {string}
 */

},{}],4:[function(require,module,exports){
'use strict';

var _App = require('./App');

var _App2 = _interopRequireDefault(_App);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_App2.default.init();

},{"./App":1}]},{},[4])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
